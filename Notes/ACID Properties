ACID Properties in SQL

The ACID properties are a set of principles that ensure reliable processing of database transactions.
ACID stands for Atomicity, Consistency, Isolation, and Durability.

# Atomicity
Atomicity ensures that a transaction is treated as a single unit of work, meaning either all operations
within the transaction are completed successfully, or none of them are. If any part of the transaction 
fails, the entire transaction is rolled back, leaving the database in its previous state. This guarantees 
that partial transactions do not occur, preventing data corruption.

Example:
Consider a bank transfer where $100 is moved from Account A to Account B. This transaction involves two 
operations: deducting $100 from Account A and adding $100 to Account B. Atomicity ensures that either both 
operations succeed or both fail. If the deduction from Account A succeeds but the addition to Account B fails,
the entire transaction is rolled back, ensuring no money is lost or incorrectly recorded.

# Consistency
Consistency ensures that a transaction brings the database from one valid state to another, maintaining 
database integrity. This means any data written to the database must comply with all predefined rules, 
including constraints, cascades, triggers, and any combination of database rules.

Example:
Continuing with the bank transfer, consistency ensures that the sum of the balances in both accounts remains 
unchanged by the transaction. If Account A has $500 and Account B has $300 before the transfer, after transferring 
$100 from A to B, the total amount should still be $800.

# Isolation
Isolation ensures that the operations of one transaction are isolated from those of other transactions. 
This means the intermediate state of a transaction is invisible to other transactions until the transaction is complete. 
Isolation levels can vary, allowing trade-offs between performance and strict isolation.

Example:
If two transactions occur simultaneously—one transferring money from Account A to Account B and another 
transferring from Account B to Account C—each transaction should not interfere with the other. The operations 
in one transaction must appear isolated to the operations in the other, preventing scenarios where both transactions 
see an incomplete state of the other.

# Durability
Durability ensures that once a transaction is committed, it will remain so, even in the event of a system 
failure. This means the results of the transaction are permanently recorded in the database. Durability is 
typically achieved through mechanisms like write-ahead logging and checkpoints.

Example:
If the bank transfer is completed and the transaction is committed, the changes (the $100 deducted from Account 
A and added to Account B) must be permanently recorded. Even if a power failure occurs immediately after the transaction 
commits, the changes should not be lost.
